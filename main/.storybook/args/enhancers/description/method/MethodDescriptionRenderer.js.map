{"version":3,"file":"MethodDescriptionRenderer.js","sourceRoot":"","sources":["../../../../../../.storybook/args/enhancers/description/method/MethodDescriptionRenderer.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,MAAM,OAAO,yBAAyB;IAAtC;QAEY,oBAAe,GAAG,CAAC,UAAuB,EAAe,EAAE;YAC/D,MAAM,aAAa,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,CAAY,EAAE,EAAE,CAAC,CACpD,MAAC,KAAK,CAAC,QAAQ,eACX,sBAAG,yBAAO,CAAC,CAAC,IAAI,GAAQ,GAAI,EAC5B,yBACI,yBAAI,gCAAY,OAAE,CAAC,CAAC,IAAI,IAAM,EAC9B,yBAAI,uCAAmB,OAAE,CAAC,CAAC,WAAW,IAAM,IAC3C,KALY,CAAC,CAAC,IAAI,CAMV,CACpB,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,8BACpB,sBAAG,qCAAiB,GAAI,EACvB,aAAa,IACf,CAAC;YAEJ,OAAO,CACH,4BACK,UAAU,EAAE,MAAM,IAAI,KAAC,SAAS,KAAG,GACrC,CACN,CAAC;QACN,CAAC,CAAA;QAEO,sBAAiB,GAAG,CAAC,WAAwB,EAAe,EAAE;YAClE,OAAO,CACH,8BACI,sBAAG,wCAAoB,GAAI,EAC3B,yBACI,yBAAI,gCAAY,OAAE,WAAW,EAAE,IAAI,IAAM,EACzC,yBAAI,uCAAmB,OAAE,WAAW,EAAE,WAAW,IAAM,IACtD,IACN,CACN,CAAC;QACN,CAAC,CAAA;QAEM,WAAM,GAAG,CAAC,KAAgC,EAAe,EAAE;YAC9D,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC;YAC1C,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;gBAC7B,OAAO,mBAAK,CAAC;aAChB;YAED,OAAO,CACH,8BACI,cAAM,EACN,cAAM,EACL,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAC9C,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IACpD,CACN,CAAC;QACN,CAAC,CAAA;IACL,CAAC;CAAA","sourcesContent":["import React from \"react\";\nimport { IDescriptionRenderer, IDescriptionRendererProps, Parameter, ReturnValue } from \"../../../types\";\n\nexport class MethodDescriptionRenderer implements IDescriptionRenderer {\n\n    private renderArguments = (parameters: Parameter[]): JSX.Element => {\n        const parameterList = parameters?.map((p: Parameter) => (\n            <React.Fragment key={p.name}>\n                <b><code>{p.name}</code></b>\n                <ul>\n                    <li><b>type:</b> {p.type}</li>\n                    <li><b>description:</b> {p.description}</li>\n                </ul>\n            </React.Fragment>\n        ));\n\n        const Arguments = () => <>\n            <p><b>Arguments:</b></p>\n            {parameterList}\n        </>;\n\n        return (\n            <>\n                {parameters?.length && <Arguments />}\n            </>\n        );\n    }\n\n    private renderReturnValue = (returnValue: ReturnValue): JSX.Element => {\n        return (\n            <>\n                <p><b>Return Value:</b></p>\n                <ul>\n                    <li><b>type:</b> {returnValue?.type}</li>\n                    <li><b>description:</b> {returnValue?.description}</li>\n                </ul>\n            </>\n        );\n    }\n\n    public render = (props: IDescriptionRendererProps): JSX.Element => {\n        const { parameters, returnValue } = props;\n        if (!parameters && !returnValue) {\n            return <></>;\n        }\n\n        return (\n            <>\n                <br />\n                <br />\n                {parameters && this.renderArguments(parameters)}\n                {returnValue && this.renderReturnValue(returnValue)}\n            </>\n        );\n    }\n}"]}