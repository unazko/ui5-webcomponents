{"version":3,"file":"HTMLTransformation.js","sourceRoot":"","sources":["../../../../.storybook/addons/html/HTMLTransformation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAc,MAAM,cAAc,CAAC;AAM9D;;;GAGG;AACH,MAAM,OAAO,kBAAkB;IAC3B,YAAoB,UAAwB;QAAxB,eAAU,GAAV,UAAU,CAAc;QACxC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAED,SAAS,CAAC,IAAY;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;YACpB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAClC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9C,OAAO,WAAW,CAAC;IACvB,CAAC;IAEO,IAAI,CAAC,IAAiB,EAAE,QAAqC;QACjE,QAAQ,CAAC,IAAI,CAAC,CAAC;QACf,IAAI,GAAG,IAAI,CAAC,iBAAgC,CAAC;QAC7C,OAAO,IAAI,EAAE;YACT,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC1B,IAAI,GAAG,IAAI,CAAC,kBAAiC,CAAC;SACjD;IACL,CAAC;IAEO,eAAe,CAAC,GAAgB;QACpC,MAAM,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;QACvC,OAAO,UAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;IAEO,YAAY,CAAC,IAAY;QAC7B,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;QAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QACtD,OAAO,GAAG,CAAC,IAAI,CAAC;IACpB,CAAC;CACJ;AAED,MAAM,UAAU,GAAG,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAE9C,MAAM,CAAC,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import { AttributeProcessor, IProcessor } from \"./processors\";\n\nexport interface IHTMLTransformation {\n    transform(html: string): string;\n}\n\n/**\n * This class is responsible for transforming the HTML code of the story.\n * Used by the HTML addon.\n */\nexport class HTMLTransformation implements IHTMLTransformation {\n    constructor(private processors: IProcessor[]) {\n        this.processors = processors;\n    }\n\n    transform(html: string): string {\n        const dom = this.convertToDOM(html);\n\n        this.walk(dom, (node) => {\n            this.processors.forEach((processor) => {\n                processor.process(node);\n            });\n        });\n\n        const transformed = this.convertToString(dom);\n        return transformed;\n    }\n\n    private walk(node: HTMLElement, callback: (node: HTMLElement) => void) {\n        callback(node);\n        node = node.firstElementChild as HTMLElement;\n        while (node) {\n            this.walk(node, callback);\n            node = node.nextElementSibling as HTMLElement;\n        }\n    }\n\n    private convertToString(dom: HTMLElement): string {\n        const serializer = new XMLSerializer();\n        return serializer.serializeToString(dom);\n    }\n\n    private convertToDOM(html: string): HTMLElement {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        return doc.body;\n    }\n}\n\nconst processors = [new AttributeProcessor()];\n\nexport const htmlTransformation = new HTMLTransformation(processors);\n"]}