{"version":3,"file":"ChangelogSorter.js","sourceRoot":"","sources":["../../../../build-scripts-storybook/docs/sorters/ChangelogSorter.ts"],"names":[],"mappings":"AAUA;;;GAGG;AACH,MAAM,OAAO,eAAe;IACjB,IAAI,CAAC,KAAc;QACtB,IAAI,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAE3C,IAAI,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;gBACnC,OAAO,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1C;YAED,IAAI,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;gBACnC,OAAO,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1C;YAED,IAAI,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;gBACnC,OAAO,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1C;YAED,IAAI,QAAQ,CAAC,UAAU,KAAK,QAAQ,CAAC,UAAU,EAAE;gBAC7C,IAAI,QAAQ,CAAC,UAAU,KAAK,IAAI,EAAE;oBAC9B,OAAO,CAAC,CAAC,CAAC;iBACb;gBAED,IAAI,QAAQ,CAAC,UAAU,KAAK,IAAI,EAAE;oBAC9B,OAAO,CAAC,CAAC;iBACZ;gBAED,OAAO,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aACjE;YAED,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAChC,IAAI,CAAC,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,YAAY,CAAC,IAAY;QAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE7D,OAAO;YACH,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC1B,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC1B,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC1B,UAAU;SACb,CAAC;IACN,CAAC;CACJ","sourcesContent":["import type { IDocsSorter } from \"./index\";\nimport type { IFile } from \"../DocsGenerator\";\n\ninterface IVersion {\n    major: number;\n    minor: number;\n    patch: number;\n    prerelease: string | null;\n}\n\n/**\n * Sort changelog files by version number\n * e.g 1.3.2, 1.2.3-rc.3 1.2.3-rc.2 1.2.3-rc.1, 1.2.1, 1.2.0, rc16, rc15\n */\nexport class ChangelogSorter implements IDocsSorter {\n    public sort(files: IFile[]): IFile[] {\n        let sorted = files.sort((a, b) => {\n            const aVersion = this.parseVersion(a.path);\n            const bVersion = this.parseVersion(b.path);\n\n            if (aVersion.major !== bVersion.major) {\n                return bVersion.major - aVersion.major;\n            }\n\n            if (aVersion.minor !== bVersion.minor) {\n                return bVersion.minor - aVersion.minor;\n            }\n\n            if (aVersion.patch !== bVersion.patch) {\n                return bVersion.patch - aVersion.patch;\n            }\n\n            if (aVersion.prerelease !== bVersion.prerelease) {\n                if (aVersion.prerelease === null) {\n                    return -1;\n                }\n\n                if (bVersion.prerelease === null) {\n                    return 1;\n                }\n\n                return aVersion.prerelease.localeCompare(bVersion.prerelease);\n            }\n\n            return 0;\n        });\n\n        sorted = sorted.map((file, index) => {\n            file.path = `${index + 1}-${file.path}`;\n            return file;\n        });\n\n        return sorted;\n    }\n\n    private parseVersion(path: string): IVersion {\n        const version = path.replace(/\\.md$/, \"\");\n\n        const [major, minor, patch, prerelease] = version.split(\".\");\n\n        return {\n            major: parseInt(major, 10),\n            minor: parseInt(minor, 10),\n            patch: parseInt(patch, 10),\n            prerelease,\n        };\n    }\n}\n"]}