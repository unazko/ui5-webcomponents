{"version":3,"file":"LinksParser.js","sourceRoot":"","sources":["../../../../build-scripts-storybook/docs/parsers/LinksParser.ts"],"names":[],"mappings":"AAEA,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB;;;;;;;;;;;;GAYG;AACH,MAAM,OAAO,WAAW;IAUb,KAAK,CAAC,KAAK,CAAC,IAAW;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAExC,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO;SACV,CAAC;IACN,CAAC;IAEO,YAAY,CAAC,IAAW;QAC5B,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QAE3C,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QAE9D,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACxB,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACtB,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC9D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACrB,OAAO;iBACV;gBACD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBACtD,MAAM,MAAM,GAAG,IAAI,IAAI,aAAa,UAAU,GAAG,CAAC;gBAClD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;SACN;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,OAAO,CAAC,IAAY;QACxB,4BAA4B;QAC5B,OAAO,CACH,OAAO,CAAC,IAAI,CAAC;YACb,OAAO,IAAI,KAAK,QAAQ;YACxB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,iBAAiB;YAC1C,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,wBAAwB;SACvE,CAAC;IACN,CAAC;IAEO,SAAS,CAAC,IAAY,EAAE,YAAoB;QAChD,yCAAyC;QACzC,yCAAyC;QACzC,MAAM;QACN,iDAAiD;QAEjD,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;QAEvE,MAAM,kBAAkB,GAAG,kBAAkB;YACzC,qBAAqB;aACpB,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;YAC3B,mFAAmF;aAClF,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC;YAC1B,4EAA4E;aAC3E,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;YACxB,6BAA6B;aAC5B,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAE/B,MAAM,UAAU,GAAG,cAAc,kBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC;QAE1E,OAAO,UAAU,CAAC;IACtB,CAAC;;AArED,iFAAiF;AAClE,yBAAa,GAAG,2BAA2B,CAAC;AAC5C,kBAAM,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;AAC/C,8BAAkB,GAAG,IAAI,MAAM,CAC1C,WAAW,CAAC,aAAa,EACzB,GAAG,CACN,CAAC;AACa,+BAAmB,GAAG,qBAAqB,CAAC","sourcesContent":["import type { IDocsParser } from \".\";\nimport type { IFile } from \"../DocsGenerator\";\nimport path from \"path\";\n\n/**\n * This parser is responsible for parsing links in markdown files.\n * It parses links in the following format:\n * [text1](text2)\n * and replaces them with:\n * [text1](./?path=link)\n * where link is a path to the file that is being linked to.\n * It also removes numbers and dashes from directory and file names.\n * For example, the following link:\n * [text1](1-getting-started/01-first-steps.mdx)\n * will be replaced with:\n * [text1](./?path=/docs/docs-getting-started-first-steps--docs)\n */\nexport class LinksParser implements IDocsParser {\n    // match all links ([text1](text2)) that are not images (i.e. don't start with !)\n    private static MD_LINK_REGEX = /(?<!\\!)\\[(.*?)\\]\\((.*?)\\)/;\n    private static SEARCH = new RegExp(LinksParser.MD_LINK_REGEX);\n    private static GLOBAL_LINK_SEARCH = new RegExp(\n        LinksParser.MD_LINK_REGEX,\n        \"g\"\n    );\n    private static ABSOLUTE_LINK_CHECK = /^(?:[a-z+]+:)?\\/\\//i;\n\n    public async parse(file: IFile): Promise<IFile> {\n        const content = this.parseContent(file);\n\n        return {\n            path: file.path,\n            content,\n        };\n    }\n\n    private parseContent(file: IFile): string {\n        let { content, path: pathRelative } = file;\n\n        const matches = content.match(LinksParser.GLOBAL_LINK_SEARCH);\n\n        if (Array.isArray(matches)) {\n            matches.forEach((match) => {\n                const [_, text, link] = match.match(LinksParser.SEARCH) || [];\n                if (!this.isMatch(link)) {\n                    return;\n                }\n                const parsedLink = this.parseLink(link, pathRelative);\n                const mdLink = `[${text}](./?path=${parsedLink})`;\n                content = content.replace(match, mdLink);\n            });\n        }\n\n        return content;\n    }\n\n    private isMatch(link: string): boolean {\n        // check if link is relative\n        return (\n            Boolean(link) &&\n            typeof link === \"string\" &&\n            !link.startsWith(\"#\") && // ignore anchors\n            !LinksParser.ABSOLUTE_LINK_CHECK.test(link) // ignore absolute links\n        );\n    }\n\n    private parseLink(link: string, pathRelative: string): string {\n        // parse links from the following format:\n        // \"1-getting-started/01-first-steps.mdx\"\n        // to:\n        // \"/docs/docs-getting-started-first-steps--docs\"\n\n        const targetFileRelative = path.join(path.dirname(pathRelative), link);\n\n        const pathRelativeParsed = targetFileRelative\n            // remove .mdx or .md\n            .replace(/\\.(mdx|md)$/, \"\")\n            // remove numbers and dash (1-, 01-, 02-, etc.) from the beginning of the file name\n            .replace(/\\/[0-9-]+/, \"/\")\n            // remove numbers and dash (1-, 01-, 02-, etc.) from the beginning of string\n            .replace(/^[0-9-]+/, \"\")\n            // replace path.sep with dash\n            .replaceAll(path.sep, \"-\");\n\n        const parsedLink = `/docs/docs-${pathRelativeParsed.toLowerCase()}--docs`;\n\n        return parsedLink;\n    }\n}\n"]}