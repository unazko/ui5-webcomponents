{"version":3,"file":"MDXParser.js","sourceRoot":"","sources":["../../../../build-scripts-storybook/docs/parsers/MDXParser.ts"],"names":[],"mappings":"AAGA,MAAM,UAAU,GAAG,CAAC,GAAW,EAAU,EAAE,CACvC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAM/C;;;;;;GAMG;AACH,MAAM,OAAO,SAAS;IAGlB,YAAY,OAA2B;QACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,EAAE,QAAQ,IAAI,SAAS,CAAC;IACnD,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,IAAW;QAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/B,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC;SACrD,CAAC;IACN,CAAC;IAEO,SAAS,CAAC,IAAY;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAEO,YAAY,CAAC,OAAe,EAAE,WAAmB;QACrD,OAAO;;eAEA,WAAW;;EAExB,OAAO,EAAE,CAAC;IACR,CAAC;IAEO,mBAAmB,CAAC,IAAY;QACpC,OAAO,UAAU,CACb,IAAI;aACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;YACrB,sCAAsC;YACtC,oCAAoC;aACnC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;YACrB,sBAAsB;aACrB,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;YAC1B,iDAAiD;aAChD,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAC1B,CAAC;IACN,CAAC;IAEO,WAAW,CAAC,IAAY;QAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjD,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAEvD,MAAM,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnD,IAAI,YAAY,GAAkB,IAAI,CAAC;QACvC,IAAI,UAAU,EAAE;YACZ,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;SACvD;QAED,MAAM,KAAK,GAAG;YACV,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;YAChD,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;YAC9C,WAAW;SACd,CAAC;QAEF,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAErD,OAAO,YAAY,CAAC;IACxB,CAAC;CACJ","sourcesContent":["import type { IDocsParser } from \"./\";\nimport type { IFile } from \"../DocsGenerator\";\n\nconst capitalize = (str: string): string =>\n    str.charAt(0).toUpperCase() + str.slice(1);\n\ninterface IMDXParserOptions {\n    subTitle?: string;\n}\n\n/**\n * This parser is responsible for parsing markdown files and converting them to MDX.\n * Adds the following to the top of the file:\n * import { Meta } from '@storybook/blocks';\n * <Meta title=\"title\" />\n * where title is the title of the article. The title is parsed from the file path.\n */\nexport class MDXParser implements IDocsParser {\n    public readonly subTitle: string | undefined;\n\n    constructor(options?: IMDXParserOptions) {\n        this.subTitle = options?.subTitle || undefined;\n    }\n\n    public async parse(file: IFile): Promise<IFile> {\n        const mdxTitle = this.getMdxTitle(file.path);\n\n        return {\n            path: this.parsePath(file.path),\n            content: this.parseContent(file.content, mdxTitle),\n        };\n    }\n\n    private parsePath(path: string): string {\n        return path.replace(/\\.md$/, \".mdx\");\n    }\n\n    private parseContent(content: string, articleName: string): string {\n        return `import { Meta } from '@storybook/blocks';\n\n<Meta title=\"${articleName}\" />\n\n${content}`;\n    }\n\n    private removePrefixNumbers(name: string): string {\n        return capitalize(\n            name\n                .replace(/\\.md$/, \"\")\n                // remove any number that prefixes the\n                // name as well as the dash after it\n                .replace(/^\\d+-/, \"\")\n                // trim any whitespace\n                .replace(/^\\s+|\\s+$/g, \"\")\n                // remove all dashes and replace them with spaces\n                .replace(/-/g, \" \")\n        );\n    }\n\n    private getMdxTitle(path: string): string {\n        const fileParts = path.split(\"/\");\n        const fileName = fileParts[fileParts.length - 1];\n        const articleName = this.removePrefixNumbers(fileName);\n\n        const folderName = fileParts[fileParts.length - 2];\n        let articleGroup: string | null = null;\n        if (folderName) {\n            articleGroup = this.removePrefixNumbers(folderName);\n        }\n\n        const parts = [\n            this.subTitle ? capitalize(this.subTitle) : null,\n            articleGroup ? capitalize(articleGroup) : null,\n            articleName,\n        ];\n\n        const articleTitle = parts.filter(Boolean).join(\"/\");\n\n        return articleTitle;\n    }\n}\n"]}