{"version":3,"file":"DocsGenerator.js","sourceRoot":"","sources":["../../../build-scripts-storybook/docs/DocsGenerator.ts"],"names":[],"mappings":"AAqBA;;;;;GAKG;AACH,MAAM,OAAO,aAAa;IAMtB,YAAY,OAA8B;QACtC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAE7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,QAAQ;QACjB,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAErC,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACrC,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAEpC,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,KAAK,CAAC,UAAU,CAAC,KAAc;QACnC,MAAM,WAAW,GAAY,EAAE,CAAC;QAChC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC/B,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aACvC;YACD,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC5B;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,KAAc;QAClC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["import type { IDocsParser } from \"./parsers\";\nimport type { IDocsSorter } from \"./sorters\";\nimport type { IDocsReader } from \"./DocsReader\";\nimport type { IDocsWriter } from \"./DocsWriter\";\n\nexport interface IDocsGenerator {\n    generate(): void;\n}\n\nexport interface IFile {\n    path: string;\n    content: string;\n}\n\ninterface IDocsGeneratorOptions {\n    reader: IDocsReader;\n    writer: IDocsWriter;\n    parsers?: IDocsParser[];\n    sorters?: IDocsSorter[];\n}\n\n/**\n * This class is responsible for generating the docs.\n * Requires a reader, writer, and optionally parsers and sorters.\n * If no parsers or sorters are provided, the files will be written as is.\n * The parsers and sorters are run in the order they are provided.\n */\nexport class DocsGenerator implements IDocsGenerator {\n    private reader: IDocsReader;\n    private writer: IDocsWriter;\n    private parsers: IDocsParser[];\n    private sorters: IDocsSorter[];\n\n    constructor(options: IDocsGeneratorOptions) {\n        this.reader = options.reader;\n        this.writer = options.writer;\n\n        this.parsers = options.parsers || [];\n        this.sorters = options.sorters || [];\n    }\n\n    public async generate(): Promise<void> {\n        let files = await this.reader.read();\n\n        files = await this.parseFiles(files);\n        files = await this.sortFiles(files);\n\n        await this.writer.clean();\n        await this.writer.write(files);\n    }\n\n    private async parseFiles(files: IFile[]): Promise<IFile[]> {\n        const parsedFiles: IFile[] = [];\n        for (const file of files) {\n            let parsed = file;\n            for (const parser of this.parsers) {\n                parsed = await parser.parse(parsed);\n            }\n            parsedFiles.push(parsed);\n        }\n        return parsedFiles;\n    }\n\n    private async sortFiles(files: IFile[]): Promise<IFile[]> {\n        let sorted = files;\n        for (const sorter of this.sorters) {\n            sorted = sorter.sort(files);\n        }\n        return sorted;\n    }\n}\n"]}