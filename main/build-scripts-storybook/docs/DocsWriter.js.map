{"version":3,"file":"DocsWriter.js","sourceRoot":"","sources":["../../../build-scripts-storybook/docs/DocsWriter.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,MAAM,CAAC;AAcxB;;;GAGG;AACH,MAAM,OAAO,UAAU;IAInB,YAAY,OAA2B;QACnC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,KAAc;QAC7B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAC7D,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/D;IACL,CAAC;IAEM,KAAK;QACR,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;CACJ","sourcesContent":["import path from \"path\";\nimport type { IDirectoryUtils } from \"../DirectoryUtils\";\nimport type { IFile } from \"./DocsGenerator\";\n\nexport interface IDocsWriter {\n    write(files: IFile[]): Promise<void>;\n    clean(): Promise<void>;\n}\n\ninterface IDocsWriterOptions {\n    dest: string;\n    directoryUtils: IDirectoryUtils;\n}\n\n/**\n * This class is responsible for writing the docs to the file system.\n * Requires a destination directory.\n */\nexport class DocsWriter implements IDocsWriter {\n    private dest: string;\n    private directoryUtils: IDirectoryUtils;\n\n    constructor(options: IDocsWriterOptions) {\n        this.directoryUtils = options.directoryUtils;\n        this.dest = options.dest;\n    }\n\n    public async write(files: IFile[]): Promise<void> {\n        if (files.length === 0) {\n            throw new Error(\"No files to write\");\n        }\n\n        if (!this.dest) {\n            throw new Error(\"No destination path provided\");\n        }\n\n        for (const file of files) {\n            const filePath = path.join(this.dest, file.path);\n            await this.directoryUtils.assureDirectoryExistence(filePath);\n            await this.directoryUtils.writeFile(filePath, file.content);\n        }\n    }\n\n    public clean(): Promise<void> {\n        return this.directoryUtils.cleanDirectory(this.dest);\n    }\n}\n"]}