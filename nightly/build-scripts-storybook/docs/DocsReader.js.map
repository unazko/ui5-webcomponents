{"version":3,"file":"DocsReader.js","sourceRoot":"","sources":["../../../build-scripts-storybook/docs/DocsReader.ts"],"names":[],"mappings":"AAaA;;;;;GAKG;AACH,MAAM,OAAO,UAAU;IAKnB,YAAY,OAA2B;QACnC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,IAAI;QACb,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACrD;QAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAC7C,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,MAAM,CACd,CAAC;QAEF,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAY,EAAE,EAAE;YACnD,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CACvD,IAAI,CAAC,GAAG,EACR,IAAI,CACP,CAAC;YACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC5D,OAAO;gBACH,IAAI,EAAE,YAAY;gBAClB,OAAO;aACV,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;CACJ","sourcesContent":["import type { IDirectoryUtils } from \"../DirectoryUtils\";\nimport type { IFile } from \"./DocsGenerator\";\n\nexport interface IDocsReader {\n    read(): Promise<IFile[]>;\n}\n\ninterface IDocsReaderOptions {\n    src: string;\n    ignore: string[];\n    directoryUtils: IDirectoryUtils;\n}\n\n/**\n * This class is responsible for reading the docs from the file system.\n * Requires a source directory and optionally an array of files to ignore.\n * The files are returned as an array of IFile objects.\n * The IFile object contains the path and content of the file.\n */\nexport class DocsReader implements IDocsReader {\n    private src: string;\n    private ignore: string[];\n    private directoryUtils: IDirectoryUtils;\n\n    constructor(options: IDocsReaderOptions) {\n        this.src = options.src;\n        this.ignore = options.ignore;\n        this.directoryUtils = options.directoryUtils;\n    }\n\n    public async read(): Promise<IFile[]> {\n        if (!this.src) {\n            throw new Error(\"DocsReader: src is not defined\");\n        }\n\n        const files = await this.directoryUtils.readFiles(\n            this.src,\n            this.ignore\n        );\n\n        const filesPromises = files.map(async (file: string) => {\n            const relativePath = this.directoryUtils.globToRelativePath(\n                this.src,\n                file\n            );\n            const content = await this.directoryUtils.readContent(file);\n            return {\n                path: relativePath,\n                content,\n            };\n        });\n\n        return Promise.all(filesPromises);\n    }\n}\n"]}