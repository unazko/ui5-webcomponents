{"version":3,"file":"pages-prepare.js","sourceRoot":"","sources":["../../build-scripts-storybook/pages-prepare.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { DirectoryUtils, IDirectoryUtils } from \"./DirectoryUtils\";\n\ninterface IContentParser {\n    parseContent(content: string): string;\n}\n\nclass AssetsParser implements IContentParser {\n    public parseContent(content: string): string {\n        const regex = /([a-zA-Z0-9_\\-]+)=\"([^\"]*assets\\/[^\"]*)\"/g;\n        const replacement = '$1=\"../../../..$2\"';\n        return content.replace(regex, replacement);\n    }\n}\n\ninterface IPagesPrepare {\n    preparePages(pagesTarget: string, pagesSource: string): Promise<void>;\n}\n\n/**\n * This class is responsible for reading and modifying the html files of the components located in the pages directory.\n * It uses parses to modify the content of the html files.\n */\nclass PagesPrepare implements IPagesPrepare {\n    private readonly directoryUtils: IDirectoryUtils;\n    private readonly parsers: IContentParser[];\n\n    constructor(parsers: IContentParser[], directoryUtils: IDirectoryUtils) {\n        this.parsers = parsers;\n        this.directoryUtils = directoryUtils;\n    }\n\n    public async preparePages(\n        pagesTarget: string,\n        pagesSource: string\n    ): Promise<void> {\n        if (!pagesTarget) {\n            throw new Error(\"No pages directory provided\");\n        }\n\n        if (!pagesSource) {\n            throw new Error(\"No pages provided\");\n        }\n\n        await this.directoryUtils.cleanDirectory(pagesTarget);\n\n        const pages = (await fs.readdir(pagesSource)).filter((page) => page.endsWith(\".html\"));\n\n        for (const page of pages) {\n            const pagePath = path.join(pagesSource, page);\n            const content = await this.directoryUtils.readContent(pagePath);\n            const modifiedContent = this.modifyContent(content);\n            const pageTargetPath = path.join(pagesTarget, page.replace(\".html\", \"\"), \"index.html\");\n            await this.directoryUtils.assureDirectoryExistence(pageTargetPath);\n            await this.directoryUtils.writeFile(pageTargetPath, modifiedContent);\n        }\n\n        return Promise.resolve();\n    }\n\n    private modifyContent(content: string): string {\n        for (const parser of this.parsers) {\n            content = parser.parseContent(content);\n        }\n\n        return content;\n    }\n}\n\nconst directoryUtils = new DirectoryUtils();\nconst parsers = [\n    new AssetsParser()\n];\nconst pagesPrepare = new PagesPrepare(parsers, directoryUtils);\n\nconst packages = [\n    \"main\",\n    \"fiori\"\n]\n\nfor (const packageName of packages) {\n    console.log(`Preparing pages for ${packageName}`);\n    const pagesTarget = `./docs/storybook-pages/${packageName}/pages/`;\n    const pagesSource = `../${packageName}/dist/test/pages/`;\n    pagesPrepare.preparePages(pagesTarget, pagesSource)\n        .then(() => console.log(`Pages for ${packageName} prepared`));\n}"]}