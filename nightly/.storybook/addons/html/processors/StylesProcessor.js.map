{"version":3,"file":"StylesProcessor.js","sourceRoot":"","sources":["../../../../../.storybook/addons/html/processors/StylesProcessor.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,OAAO,eAAe;IACxB,OAAO,CAAC,IAAiB;QACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEO,WAAW,CAAC,GAAgB;QAChC,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;QACpE,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,eAAe;YAC3C,IAAI,YAAY,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,YAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBACnE,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;aAC7B;YACD,MAAM,kBAAkB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5C,kBAAkB,CAAC,SAAS,GAAG,YAAY,CAAC;YAC5C,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;SACnC;IACL,CAAC;IAEO,iBAAiB,CAAC,GAAW;QACjC,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,cAAc,GAAG,QAAQ,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,SAAS;aACZ;YACD,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,MAAM,GAAG,cAAc,IAAI,MAAM,KAAK,CAAC,CAAC,EAAE;gBAC1C,cAAc,GAAG,MAAM,CAAC;aAC3B;SACJ;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;SACjD;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;CACJ","sourcesContent":["import { IProcessor } from \"./IProcessor\";\n\n/**\n * This class is responsible for formatting the style elements of the story:\n * merge multiple style elements and unify their indentation.\n */\nexport class StylesProcessor implements IProcessor {\n    process(node: HTMLElement): void {\n        this.mergeStyles(node);\n    }\n\n    private mergeStyles(dom: HTMLElement) {\n        const styleElements = Array.from(dom.getElementsByTagName('style'));\n        if (styleElements.length > 1) { // merge needed\n            let mergedStyles = \"\";\n            for (let i = 0; i < styleElements.length; i++) {\n                mergedStyles += this.removeIndentation(styleElements[i].innerHTML);\n                styleElements[i].remove();\n            }\n            const mergedStyleElement = styleElements[0];\n            mergedStyleElement.innerHTML = mergedStyles;\n            dom.prepend(mergedStyleElement);\n        }\n    }\n\n    private removeIndentation(str: string) {\n        const lines = str.split('\\n');\n        let shortestIndent = Infinity;\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].trim().length === 0) {\n                continue;\n            }\n            let indent = lines[i].search(/\\S/);\n            if (indent < shortestIndent && indent !== -1) {\n                shortestIndent = indent;\n            }\n        }\n        for (let i = 0; i < lines.length; i++) {\n            lines[i] = lines[i].substring(shortestIndent);\n        }\n        return lines.join('\\n');\n    }\n}\n"]}